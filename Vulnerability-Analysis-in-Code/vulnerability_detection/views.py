from django.shortcuts import render
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch
import numpy as np
import re

# Instantiate the tokenizer and model
tokenizer = AutoTokenizer.from_pretrained('mrm8488/codebert-base-finetuned-detect-insecure-code')
model = AutoModelForSequenceClassification.from_pretrained('mrm8488/codebert-base-finetuned-detect-insecure-code')

# Your static code analysis function
def static_code_analysis(code):
    vulnerabilities = []
    try:
        code_lines = code.split('\n')  # Split the code into lines

        for line_number, line in enumerate(code_lines, start=1):
            line_lower = line.lower()  # Convert the line to lowercase for case-insensitive checks

            # Example: detect the use of 'eval' function
            if 'eval' in line_lower:
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Use of eval function (potential code injection)',
                    'mitre_technique': 'T1059.001',
                    'severity': 'High'
                })

            # Example: detect the use of 'os.system' function
            if 'os.system' in line:
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Use of os.system function (potential command injection)',
                    'mitre_technique': 'T1059.003',
                    'severity': 'High'
                })

            # Example: SQL Injection
            if re.search(r'\b(select|insert|update|delete|drop|alter)\b', line_lower):
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential SQL Injection vulnerability',
                    'mitre_technique': 'T1111',
                    'severity': 'High'
                })

            # Example: Cross-Site Scripting (XSS)
            if 'script' in line_lower:
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential Cross-Site Scripting (XSS) vulnerability',
                    'mitre_technique': 'T1063',
                    'severity': 'High'
                })

            # Example: Insecure Deserialization
            if 'pickle.loads' in line:
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential Insecure Deserialization vulnerability',
                    'mitre_technique': 'T1029',
                    'severity': 'High'
                })

            # Example: Directory Traversal
            if 'open(' in line and '../' in line:
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential Directory Traversal vulnerability',
                    'mitre_technique': 'T1070',
                    'severity': 'High'
                })

            # Example: Remote File Inclusion (RFI)
            if 'http://' in line or 'https://' in line:
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential Remote File Inclusion (RFI) vulnerability',
                    'mitre_technique': 'T1100',
                    'severity': 'High'
                })

            # Command Injection
            if 'subprocess' in line_lower or 'popen' in line_lower:
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential Command Injection vulnerability',
                    'mitre_technique': 'T1059.003',
                    'severity': 'High'
                })

            # Path Traversal
            if 'path' in line_lower and ('join' in line_lower or 'open' in line_lower):
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential Path Traversal vulnerability',
                    'mitre_technique': 'T1070',
                    'severity': 'High'
                })

            # Insecure Cryptographic Storage
            if 'md5' in line_lower or 'sha1' in line_lower or 'base64' in line_lower:
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential Insecure Cryptographic Storage vulnerability',
                    'mitre_technique': 'T1022',
                    'severity': 'High'
                })

            # Improper Input Validation
            if 'input' in line_lower or 'request' in line_lower or 'get' in line_lower:
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential Improper Input Validation vulnerability',
                    'mitre_technique': 'T1075',
                    'severity': 'High'
                })

            # Insufficient Session Expiration
            if 'session' in line_lower and ('timeout' in line_lower or 'expire' in line_lower):
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential Insufficient Session Expiration vulnerability',
                    'mitre_technique': 'T1070',
                    'severity': 'High'
                })

            # SQL Injection via Django ORM
            if '.raw(' in line or 'execute_sql(' in line:
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential SQL Injection vulnerability (using raw SQL queries)',
                    'mitre_technique': 'T1111',
                    'severity': 'High'
                })

            # Remote Code Execution (RCE) via pickle
            if 'pickle.loads' in line:
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential Remote Code Execution (RCE) vulnerability (using pickle deserialization)',
                    'mitre_technique': 'T1068',
                    'severity': 'High'
                })

            # Cross-Site Request Forgery (CSRF)
            if 'csrf' in line_lower:
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential Cross-Site Request Forgery (CSRF) vulnerability',
                    'mitre_technique': 'T155',
                })
                # Cross-Site Request Forgery (CSRF)
            if 'csrf' in line_lower:
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential Cross-Site Request Forgery (CSRF) vulnerability',
                    'mitre_technique': 'T1551',
                    'severity': 'High'
                })

            # Insufficient Authentication
            if 'login' in line_lower or 'authenticate' in line_lower:
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential Insufficient Authentication vulnerability',
                    'mitre_technique': 'T1552',
                    'severity': 'High'
                })

            # XML External Entity (XXE) Injection
            if 'xml' in line_lower and 'parse' in line_lower:
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential XML External Entity (XXE) Injection vulnerability',
                    'mitre_technique': 'T1574',
                    'severity': 'High'
                })

            # Server-Side Request Forgery (SSRF)
            if 'requests.get' in line or 'requests.post' in line:
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential Server-Side Request Forgery (SSRF) vulnerability',
                    'mitre_technique': 'T1133',
                    'severity': 'High'
                })

            # Unvalidated Redirects and Forwards
            if 'redirect' in line_lower or 'forward' in line_lower:
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential Unvalidated Redirects and Forwards vulnerability',
                    'mitre_technique': 'T1553',
                    'severity': 'High'
                })

            # Command Injection via Shell Metacharacters
            if any(x in line for x in ['&', '|', ';', '`']):
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential Command Injection via Shell Metacharacters',
                    'mitre_technique': 'T1059.003',
                    'severity': 'High'
                })

            # Hardcoded Credentials
            if any(x in line_lower for x in ['password', 'secret', 'token']):
                vulnerabilities.append({
                    'line_number': line_number,
                    'description': 'Potential Hardcoded Credentials',
                    'mitre_technique': 'T1552',
                    'severity': 'High'
                })


    except ValueError as e:
        print("ValueError occurred:", e)

    return vulnerabilities
# Function to get line number based on character position
def get_line_number(code, char_pos):
    return code.count('\n', 0, char_pos) + 1

def home(request):
    return render(request, 'vulnerability_detection/index.html')

def detect_vulnerabilities(request):
    if request.method == 'POST':
        code = request.POST.get('code', '')

        # Perform static code analysis
        vulnerabilities_static_analysis = static_code_analysis(code)

        # Tokenize the input code
        inputs = tokenizer(code, return_tensors="pt", truncation=True, padding='max_length')

        # Perform inference
        outputs = model(**inputs)

        # Get prediction
        logits = outputs.logits
        prediction = np.argmax(logits.detach().numpy())

        # Calculate vulnerability percentage
        softmax_output = torch.softmax(logits, dim=1)
        vulnerability_percentage = softmax_output[0][prediction].item() * 100

        # Prepare the result message with vulnerability details
        result_message = f"Vulnerability Percentage: {vulnerability_percentage:.2f}%"

        # Highlight vulnerabilities in the user's code
        highlighted_lines = []
        for line_number, line in enumerate(code.split('\n'), start=1):
            for vulnerability in vulnerabilities_static_analysis:
                if line_number == vulnerability.get('line_number', ''):
                    line = f'<span class="vulnerability-line">{line}</span>'
                    break  # Once a vulnerability is found on this line, stop searching for others
            highlighted_lines.append(line)

        highlighted_code = '\n'.join([f'<span class="line-number">{line_number}</span>{line}' for line_number, line in enumerate(highlighted_lines, start=1)])

        return render(request, 'vulnerability_detection/result.html', {
            'result_message': result_message,
            'highlighted_code': highlighted_code,
            'vulnerabilities_static_analysis': vulnerabilities_static_analysis
        })

    return render(request, 'vulnerability_detection/index.html')
